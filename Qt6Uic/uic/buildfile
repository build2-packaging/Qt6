import libs  = libpcre2%lib{pcre2-16}
import libs += libtinycbor%lib{tinycbor}

# Target metadata, see also --build2-metadata in main.cpp.
#
# Note that qt6uic does not query any environment variables that can affect
# its output.
#
exe{qt6uic}:
{
  export.metadata = 1 qt6uic
  qt6uic.name = [string] uic
  qt6uic.version  = [string] $version
  qt6uic.checksum = [string] $version
}

windows = ($cxx.target.class == 'windows')
unix    = ($cxx.target.class != 'windows')
macos   = ($cxx.target.class == 'macos')

# UIC application source files.
#
uic_src = customwidgetsinfo             \
          databaseinfo                  \
          driver                        \
          main                          \
          treewalker                    \
          ui4                           \
          uic                           \
          validator                     \
          cpp/cppwritedeclaration       \
          cpp/cppwriteincludes          \
          cpp/cppwriteinitialization    \
          python/pythonwritedeclaration \
          python/pythonwriteimports     \
          shared/language               \
          shared/writeincludesbase

# The QtCore source files required to build the uic executable.
#
# Note that the upstream UIC is linked against the QtCore library proper but
# we cannot do that because that library is/should not be in the host
# configuration.
#
# The following set of sources is mostly based on the sources in the bootstrap
# library's CMakeLists.txt.
#
core_src = QtCore/global/qassert                        \
           QtCore/global/qendian                        \
           QtCore/global/qfloat16                       \
           QtCore/global/qglobal                        \
           QtCore/global/qlogging                       \
           QtCore/global/qmalloc                        \
           QtCore/global/qnumeric                       \
           QtCore/global/qoperatingsystemversion        \
           QtCore/global/qrandom                        \
           QtCore/global/qtenvironmentvariables         \
           QtCore/io/qabstractfileengine                \
           QtCore/io/qbuffer                            \
           QtCore/io/qdebug                             \
           QtCore/io/qdir                               \
           QtCore/io/qdiriterator                       \
           QtCore/io/qfile                              \
           QtCore/io/qfiledevice                        \
           QtCore/io/qfileinfo                          \
           QtCore/io/qfilesystemengine                  \
           QtCore/io/qfilesystementry                   \
           QtCore/io/qfsfileengine                      \
           QtCore/io/qfsfileengine_iterator             \
           QtCore/io/qiodevice                          \
           QtCore/io/qipaddress                         \
           QtCore/io/qloggingcategory                   \
           QtCore/io/qloggingregistry                   \
           QtCore/io/qresource                          \
           QtCore/io/qsavefile                          \
           QtCore/io/qstandardpaths                     \
           QtCore/io/qtemporaryfile                     \
           QtCore/io/qurl                               \
           QtCore/io/qurlidna                           \
           QtCore/io/qurlquery                          \
           QtCore/io/qurlrecode                         \
           QtCore/kernel/qcoreapplication               \
           QtCore/kernel/qiterable                      \
           QtCore/kernel/qmetacontainer                 \
           QtCore/kernel/qmetatype                      \
           QtCore/kernel/qsystemerror                   \
           QtCore/kernel/qvariant                       \
           QtCore/plugin/quuid                          \
           QtCore/serialization/qcborcommon             \
           QtCore/serialization/qcborstreamwriter       \
           QtCore/serialization/qcborvalue              \
           QtCore/serialization/qdatastream             \
           QtCore/serialization/qjsonarray              \
           QtCore/serialization/qjsoncbor               \
           QtCore/serialization/qjsondocument           \
           QtCore/serialization/qjsonobject             \
           QtCore/serialization/qjsonparser             \
           QtCore/serialization/qjsonvalue              \
           QtCore/serialization/qjsonwriter             \
           QtCore/serialization/qtextstream             \
           QtCore/serialization/qxmlutils               \
           QtCore/serialization/qxmlstream              \
           QtCore/serialization/qxmlstreamgrammar       \
           QtCore/text/qbytearray                       \
           QtCore/text/qbytearraylist                   \
           QtCore/text/qbytearraymatcher                \
           QtCore/text/qlatin1stringmatcher             \
           QtCore/text/qlocale                          \
           QtCore/text/qlocale_tools                    \
           QtCore/text/qregularexpression               \
           QtCore/text/qstring                          \
           QtCore/text/qstringbuilder                   \
           QtCore/text/qstringconverter                 \
           QtCore/text/qstringlist                      \
           QtCore/text/qvsnprintf                       \
           QtCore/time/qcalendar                        \
           QtCore/time/qdatetime                        \
           QtCore/time/qgregoriancalendar               \
           QtCore/time/qlocaltime                       \
           QtCore/time/qromancalendar                   \
           QtCore/time/qtimezone                        \
           QtCore/tools/qarraydata                      \
           QtCore/tools/qbitarray                       \
           QtCore/tools/qcommandlineoption              \
           QtCore/tools/qcommandlineparser              \
           QtCore/tools/qcryptographichash              \
           QtCore/tools/qhash                           \
           QtCore/tools/qringbuffer                     \
           QtCore/tools/qversionnumber

# The UNIX-specific QtCore source files required to build uic. Note that
# this includes Mac OS.
#
unix_core_src = QtCore/io/qfilesystemengine_unix        \
                QtCore/io/qfilesystemiterator_unix      \
                QtCore/io/qfsfileengine_unix            \
                QtCore/kernel/qcore_unix

# The Windows-specific QtCore source files required to build uic.
#
win_core_src = QtCore/global/qoperatingsystemversion_win        \
               QtCore/io/qfilesystemengine_win                  \
               QtCore/io/qfilesystemiterator_win                \
               QtCore/io/qfsfileengine_win                      \
               QtCore/io/qstandardpaths_win                     \
               QtCore/kernel/qcoreapplication_win               \
               QtCore/kernel/qfunctions_win                     \
               QtCore/kernel/qwinregistry                       \
               QtCore/plugin/qsystemlibrary

# The Mac OS-specific C++ QtCore source files required to build uic.
#
macos_core_src = QtCore/kernel/qcoreapplication_mac

# The Mac OS-specific Objective-C++ QtCore source files required to build
# uic.
#
macos_core_src_mm = QtCore/global/qoperatingsystemversion_darwin        \
                    QtCore/io/qfilesystemengine_mac                     \
                    QtCore/io/qstandardpaths_mac                        \
                    QtCore/kernel/qcore_foundation                      \
                    QtCore/kernel/qcore_mac

all_core_src = $core_src $unix_core_src $win_core_src \
               $macos_core_src $macos_core_src_mm

gen_hdr = QtCore/qtcoreexports QtCore/qconfig

exe{qt6uic}: hxx{** -{$gen_hdr} +QtCore/Q*.} h{$gen_hdr}        \
             cxx{$core_src $uic_src}                            \
             testscript

exe{qt6uic}: cxx{$unix_core_src}:                include = $unix
exe{qt6uic}: cxx{QtCore/io/qstandardpaths_unix}: include = ($unix && ! $macos)
exe{qt6uic}: cxx{$macos_core_src}:               include = $macos
exe{qt6uic}: mm{$macos_core_src_mm}:             include = $macos
exe{qt6uic}: cxx{$win_core_src}:                 include = $windows

all_core_src += QtCore/io/qstandardpaths_unix

# Ensure that C and C++ source files that are included by other source files
# instead of compiled themselves are included in the distribution.
#
exe{qt6uic}: cxx{3rdparty/sha1/sha1}    \
             cxx{** -{$uic_src          \
                      $core_src         \
                      $unix_core_src    \
                      $win_core_src     \
                      $macos_core_src}}: include = adhoc

# Generated headers and source files.
#
using autoconf

QtCore/h{qconfig}: in.symbol = '$'

# All-Qt public configuration header. Included by other Qt libraries via
# QtCore/qtconfiginclude.h.
#
# See the .in file for more information.
#
QtCore/h{qconfig}: QtCore/in{qconfig}
{
  autoconf.prefix = qconfig_

  QT_VERSION_STR="$version.major.$version.minor.$version.patch"
  QT_VERSION_MAJOR="$version.major"
  QT_VERSION_MINOR="$version.minor"
  QT_VERSION_PATCH="$version.patch"
}

QtCore/h{qtcoreexports}: QtCore/in{qtcoreexports}
{
  in.symbol = '@'
  header_base_name_upper = QTCOREEXPORTS
  module_define_infix    = CORE
}

exe{qt6uic}: $libs

# Build options.
#
cxx.poptions =+ "-I$out_base"         "-I$src_base"                                     \
                "-I$out_base/QtCore"  "-I$src_base/QtCore"                              \
                                      "-I$src_base/QtCore/private"                      \
                                      "-I$src_base/QtCore/private/QtCore"               \
                                      "-I$src_base/QtCore/private/QtCore/private"       \
                                      "-I$src_base/cpp"                                 \
                                      "-I$src_base/python"                              \
                                      "-I$src_base/shared"

if $windows
{
  if ($cxx.target.system == 'mingw32')
  {
    cxx.coptions += -fno-keep-inline-dllexport
    cxx.libs     += -lole32 -ladvapi32 -lnetapi32 -luuid
  }
  else
    cxx.libs     += ole32.lib advapi32.lib netapi32.lib
}
else
{
  if $macos
    cxx.libs += -framework AppKit       \
                -framework CoreServices \
                -framework Foundation   \
                -framework IOKit        \
                -framework Security
}

# Add platform-specific header directories, libraries, compilation options,
# and macro definitions.
#
# Every directory under mkspecs/ contains a unique `qplatformdefs.h`.
#
# Note that Mac OS with GCC is not supported by upstream (see README-DEV for
# details).
#
switch $cxx.target.class, $cxx.id, $cxx.target.system
{
  case 'linux', 'gcc'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/linux-g++"
  case 'linux', 'clang'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/linux-clang"
  case 'macos', 'clang-apple'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/macx-clang"
  case 'bsd', 'clang', 'freebsd'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/freebsd-clang"
  case 'bsd', 'gcc', 'openbsd'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/openbsd-g++"
  case 'bsd', 'gcc', 'netbsd'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/netbsd-g++"
  case 'windows', 'msvc'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/win32-msvc"
  case 'windows', 'msvc-clang' | 'clang'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/win32-clang-msvc"
  case 'windows', 'gcc', 'mingw32'
    cxx.poptions =+ "-I$src_root/uic/mkspecs/win32-g++"
}

cxx.poptions += -DQT_NO_CAST_FROM_ASCII \
                -DQT_NO_FOREACH

obj{$all_core_src}: cxx.poptions += $bootstrap_macros
obj{$uic_src}:      cxx.poptions += $compiler_macros -DQT_UIC

# Disable exceptions on the uic objects.
#
switch $cxx.class
{
  case 'gcc'
  {
    obj{$uic_src}:
    {
      cxx.poptions += -DQT_NO_EXCEPTIONS
      cxx.coptions += -fno-exceptions
    }
  }
  case 'msvc'
  {
    obj{$uic_src}:
    {
      cxx.poptions += -DQT_NO_EXCEPTIONS
      cxx.coptions += /EHs- /EHc-
    }
  }
}
