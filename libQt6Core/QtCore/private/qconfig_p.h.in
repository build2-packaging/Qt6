// NOTE regarding commented-out QT_FEATURE_* lines: if the build succeeds then
// these features are not referenced in the code (see QT_CONFIG() in
// qglobal.h) so leave as many as possible commented-out until we've packaged
// all Qt libraries, at which point the remaining commented-out lines can be
// deleted.

// This would require packaging QtDBus which we are not planning to do at this
// time.
//
// NOTE: If we decide to package QtDBus and set this to 1, remember to remove
//       QT_NO_DBUS from qconfig.h.in.
//
#define QT_FEATURE_dbus -1
// #define QT_FEATURE_dbus_linked 1

#undef qconfig_p_HAVE_DLOPEN
#ifdef qconfig_p_HAVE_DLOPEN
# define QT_FEATURE_dlopen 1
#else
# define QT_FEATURE_dlopen -1
#endif

// "support for split sections and linker garbage collection"
//
#define QT_FEATURE_gc_binaries -1

// "Support for Intel Control-flow Enforcement Technology".
//
// #define QT_FEATURE_intelcet -1

// Udev is part of systemd so we can't assume anything even on Linux.
//
// It looks like Qt only supports device discovery through udev (dynamically)
// or evdev (statically only) and udev supercedes evdev. See
// upstream/qtbase/src/platformsupport/devicediscovery/.
//
#define QT_FEATURE_libudev -1

#undef qconfig_p_HAVE_POSIX_FALLOCATE
#ifdef qconfig_p_HAVE_POSIX_FALLOCATE
#  define QT_FEATURE_posix_fallocate 1
#else
#  define QT_FEATURE_posix_fallocate -1
#endif

// "Enable the Qt installation to be relocated."
//
// Only used in qlibraryinfo.cpp. If enabled, used to find the directory
// containing the library (using dladdr(), for example) in order to handle
// calls to QLibraryInfo::location(QLibraryInfo::PrefixPath). If disabled the
// hardcoded path in qt_configure_prefix_path_str in qconfig.cpp.in is used
// (which we currently set to build2's install_prefix).
//
#define QT_FEATURE_relocatable -1

// Zstandard support.
//
// @@ TMP System only, not bundled with Qt.
//
//    Used to:
//
//    - decompress resources (QResource in qtbase/src/corelib/io/qresource.cpp
//      and rcc, the resource compiler at qtbase/src/tools/rcc/)
//
//    - decompress the MIME database
//      (qtbase/src/corelib/mimetypes/qmimeprovider.cpp)
//
//    So if disabled then MIME databases and resources compressed using zstd
//    are not supported (but zlib-compressed ones are).
//
#define QT_FEATURE_zstd -1

// Features we definitely won't be needing. For example, most of these
// are only referenced in qmake build files or only result in the addition
// of compiler options we don't need, and some are even not referenced
// anywhere.
//
// #define QT_FEATURE_sse2 1
// #define QT_FEATURE_alloca_h 1
// #define QT_FEATURE_alloca 1
// #define QT_FEATURE_alloca_malloc_h -1
// #define QT_FEATURE_avx2 1

// We use the build2-packaged version of zlib.
//
// #define QT_FEATURE_system_zlib -1

// #define QT_FEATURE_stack_protector_strong -1

// These features indicate whether the corresponding Qt library is enabled.
//
// #define QT_FEATURE_gui 1
// #define QT_FEATURE_widgets 1
// #define QT_FEATURE_network 1
// #define QT_FEATURE_testlib 1
// #define QT_FEATURE_sql 1
// #define QT_FEATURE_xml 1

// #define QT_FEATURE_private_tests -1
// #define QT_FEATURE_android_style_assets -1

// Adds -fvisibility=hidden to the compiler command line.
//
//#define QT_FEATURE_reduce_exports -1

// Adds -Bsymbolic-functions to the linker command line.
//
// #define QT_FEATURE_reduce_relocations -1

// Whether or not to build tools in release mode.
//
//#define QT_FEATURE_release_tools -1
