intf_libs = # Interface dependencies.
import impl_libs  = libb2%lib{b2}
import impl_libs += libdouble-conversion%lib{double-conversion}
import impl_libs += libicui18n%lib{icui18n}
import impl_libs += libicuuc%lib{icuuc}
import impl_libs += libpcre2%lib{pcre2-16}
import impl_libs += libtinycbor%lib{tinycbor}
import impl_libs += libz%lib{z}

import! [metadata] moc = Qt6Moc%exe{qt6moc}
import! [metadata] xxd = xxd%exe{xxd}

windows = ($cxx.target.class  == 'windows')
unix    = ($cxx.target.class  != 'windows')
linux   = ($cxx.target.class  == 'linux')
bsd     = ($cxx.target.class  == 'bsd')
netbsd  = ($bsd && $cxx.target.system == 'netbsd')
macos   = ($cxx.target.class  == 'macos')

# Source files.
#
src = animation/qabstractanimation              \
      animation/qanimationgroup                 \
      animation/qparallelanimationgroup         \
      animation/qpauseanimation                 \
      animation/qpropertyanimation              \
      animation/qsequentialanimationgroup       \
      animation/qvariantanimation               \
      compat/removed_api                        \
      global/archdetect                         \
      global/q23utility                         \
      global/qassert                            \
      global/qcompare                           \
      global/qendian                            \
      global/qexceptionhandling                 \
      global/qfloat16                           \
      global/qglobal                            \
      global/qhooks                             \
      global/qlibraryinfo                       \
      global/qlogging                           \
      global/qmalloc                            \
      global/qnumeric                           \
      global/qoperatingsystemversion            \
      global/qrandom                            \
      global/qsimd                              \
      global/qsysinfo                           \
      global/qtenvironmentvariables             \
      global/qtversionchecks                    \
      global/qtypes                             \
      io/qabstractfileengine                    \
      io/qbuffer                                \
      io/qdataurl                               \
      io/qdebug                                 \
      io/qdir                                   \
      io/qdiriterator                           \
      io/qfile                                  \
      io/qfiledevice                            \
      io/qfileinfo                              \
      io/qfileselector                          \
      io/qfilesystemengine                      \
      io/qfilesystementry                       \
      io/qfilesystemwatcher                     \
      io/qfilesystemwatcher_polling             \
      io/qfsfileengine                          \
      io/qfsfileengine_iterator                 \
      io/qiodevice                              \
      io/qipaddress                             \
      io/qlockfile                              \
      io/qloggingcategory                       \
      io/qloggingregistry                       \
      io/qnoncontiguousbytedevice               \
      io/qprocess                               \
      io/qresource                              \
      io/qresource_iterator                     \
      io/qsavefile                              \
      io/qsettings                              \
      io/qstandardpaths                         \
      io/qstorageinfo                           \
      io/qtemporarydir                          \
      io/qtemporaryfile                         \
      io/qurl                                   \
      io/qurlidna                               \
      io/qurlquery                              \
      io/qurlrecode                             \
      io/qzip                                   \
      ipc/qsharedmemory                         \
      ipc/qsystemsemaphore                      \
      ipc/qtipccommon                           \
      itemmodels/qabstractitemmodel             \
      itemmodels/qabstractproxymodel            \
      itemmodels/qconcatenatetablesproxymodel   \
      itemmodels/qidentityproxymodel            \
      itemmodels/qitemselectionmodel            \
      itemmodels/qsortfilterproxymodel          \
      itemmodels/qstringlistmodel               \
      itemmodels/qtransposeproxymodel           \
      kernel/qabstracteventdispatcher           \
      kernel/qabstractnativeeventfilter         \
      kernel/qassociativeiterable               \
      kernel/qbasictimer                        \
      kernel/qcoreapplication                   \
      kernel/qcoreevent                         \
      kernel/qdeadlinetimer                     \
      kernel/qelapsedtimer                      \
      kernel/qeventloop                         \
      kernel/qiterable                          \
      kernel/qmath                              \
      kernel/qmetacontainer                     \
      kernel/qmetaobject                        \
      kernel/qmetaobjectbuilder                 \
      kernel/qmetatype                          \
      kernel/qmimedata                          \
      kernel/qobject                            \
      kernel/qobjectcleanuphandler              \
      kernel/qproperty                          \
      kernel/qsequentialiterable                \
      kernel/qsignalmapper                      \
      kernel/qsocketnotifier                    \
      kernel/qsystemerror                       \
      kernel/qtestsupport_core                  \
      kernel/qtimer                             \
      kernel/qtranslator                        \
      kernel/qvariant                           \
      mimetypes/qmimedatabase                   \
      mimetypes/qmimeglobpattern                \
      mimetypes/qmimemagicrule                  \
      mimetypes/qmimemagicrulematcher           \
      mimetypes/qmimeprovider                   \
      mimetypes/qmimetype                       \
      mimetypes/qmimetypeparser                 \
      plugin/qfactoryinterface                  \
      plugin/qfactoryloader                     \
      plugin/qlibrary                           \
      plugin/qpluginloader                      \
      plugin/quuid                              \
      serialization/qcborcommon                 \
      serialization/qcbordiagnostic             \
      serialization/qcborstreamreader           \
      serialization/qcborstreamwriter           \
      serialization/qcborvalue                  \
      serialization/qdatastream                 \
      serialization/qjsonarray                  \
      serialization/qjsoncbor                   \
      serialization/qjsondocument               \
      serialization/qjsonobject                 \
      serialization/qjsonparser                 \
      serialization/qjsonvalue                  \
      serialization/qjsonwriter                 \
      serialization/qtextstream                 \
      serialization/qxmlstream                  \
      serialization/qxmlstreamgrammar           \
      serialization/qxmlutils                   \
      text/qanystringview                       \
      text/qbytearray                           \
      text/qbytearraylist                       \
      text/qbytearraymatcher                    \
      text/qcollator                            \
      text/qcollator_icu                        \
      text/qlatin1stringmatcher                 \
      text/qlocale                              \
      text/qlocale_icu                          \
      text/qlocale_tools                        \
      text/qregularexpression                   \
      text/qstring                              \
      text/qstringbuilder                       \
      text/qstringconverter                     \
      text/qstringlist                          \
      text/qstringtokenizer                     \
      text/qstringview                          \
      text/qtextboundaryfinder                  \
      text/qunicodetools                        \
      text/qvsnprintf                           \
      thread/qatomic                            \
      thread/qexception                         \
      thread/qfutureinterface                   \
      thread/qfuturewatcher                     \
      thread/qmutex                             \
      thread/qreadwritelock                     \
      thread/qresultstore                       \
      thread/qrunnable                          \
      thread/qsemaphore                         \
      thread/qthread                            \
      thread/qthreadpool                        \
      thread/qthreadstorage                     \
      time/qcalendar                            \
      time/qdatetime                            \
      time/qdatetimeparser                      \
      time/qgregoriancalendar                   \
      time/qhijricalendar                       \
      time/qislamiccivilcalendar                \
      time/qjalalicalendar                      \
      time/qjuliancalendar                      \
      time/qlocaltime                           \
      time/qmilankoviccalendar                  \
      time/qromancalendar                       \
      time/qtimezone                            \
      time/qtimezoneprivate                     \
      tools/qarraydata                          \
      tools/qbitarray                           \
      tools/qcommandlineoption                  \
      tools/qcommandlineparser                  \
      tools/qcontiguouscache                    \
      tools/qcryptographichash                  \
      tools/qeasingcurve                        \
      tools/qfreelist                           \
      tools/qfunctionaltools_impl               \
      tools/qhash                               \
      tools/qline                               \
      tools/qmargins                            \
      tools/qpoint                              \
      tools/qrect                               \
      tools/qrefcount                           \
      tools/qringbuffer                         \
      tools/qshareddata                         \
      tools/qsharedpointer                      \
      tools/qsize                               \
      tools/qtimeline                           \
      tools/qtyperevision                       \
      tools/qversionnumber

# Headers to be moc'd and the outputs compiled.
#
moc_hdr = private/QtCore/private/qsingleshottimer_p \
          qnamespace

# Headers to be moc'ed and the outputs included.
#
moc_hdr_adhoc = private/QtCore/private/qabstractanimation_p             \
                private/QtCore/private/qfactoryloader_p                 \
                private/QtCore/private/qfilesystemwatcher_p             \
                private/QtCore/private/qfilesystemwatcher_polling_p     \
                private/QtCore/private/qnoncontiguousbytedevice_p       \
                private/QtCore/private/qtextstream_p                    \
                qabstractanimation                                      \
                qabstracteventdispatcher                                \
                qabstractitemmodel                                      \
                qabstractproxymodel                                     \
                qanimationgroup                                         \
                qbuffer                                                 \
                qcalendar                                               \
                qcborcommon                                             \
                qcborstreamreader                                       \
                qcborvalue                                              \
                qconcatenatetablesproxymodel                            \
                qcoreapplication                                        \
                qcoreevent                                              \
                qcryptographichash                                      \
                qeasingcurve                                            \
                qeventloop                                              \
                qfile                                                   \
                qfiledevice                                             \
                qfileselector                                           \
                qfilesystemwatcher                                      \
                qfuturewatcher                                          \
                qidentityproxymodel                                     \
                qiodevice                                               \
                qitemselectionmodel                                     \
                qlibrary                                                \
                qlocale                                                 \
                qmimedata                                               \
                qmimetype                                               \
                qobject                                                 \
                qobjectcleanuphandler                                   \
                qparallelanimationgroup                                 \
                qpauseanimation                                         \
                qpluginloader                                           \
                qprocess                                                \
                qpropertyanimation                                      \
                qsavefile                                               \
                qsequentialanimationgroup                               \
                qsettings                                               \
                qsharedmemory                                           \
                qsignalmapper                                           \
                qsocketnotifier                                         \
                qsortfilterproxymodel                                   \
                qstandardpaths                                          \
                qstringlistmodel                                        \
                qsystemsemaphore                                        \
                qtemporaryfile                                          \
                qthread                                                 \
                qthreadpool                                             \
                qtimeline                                               \
                qtimer                                                  \
                qtipccommon                                             \
                qtranslator                                             \
                qtransposeproxymodel                                    \
                qvariantanimation

# UNIX headers to be moc'd and the outputs included.
#
unix_moc_hdr_adhoc = private/QtCore/private/qeventdispatcher_unix_p

# Linux headers to be moc'd and the outputs included.
#
linux_moc_hdr_adhoc = private/QtCore/private/qfilesystemwatcher_inotify_p

# Windows headers to be moc'd and the outputs included.
#
win_moc_hdr_adhoc = private/QtCore/private/qeventdispatcher_win_p     \
                    private/QtCore/private/qfilesystemwatcher_win_p   \
                    private/QtCore/private/qwindowspipereader_p       \
                    private/QtCore/private/qwindowspipewriter_p       \
                    qwineventnotifier

# macOS headers to be moc'd and the outputs compiled.
#
macos_moc_hdr = private/QtCore/private/qfilesystemwatcher_fsevents_p

# macOS headers to be moc'd and the outputs included.
#
macos_moc_hdr_adhoc = private/QtCore/private/qdarwinpermissionplugin_p.h        \
                      private/QtCore/private/qeventdispatcher_cf_p              \
                      qpermissions

# BSD headers to be moc'd and the outputs compiled.
#
bsd_moc_hdr_adhoc = private/QtCore/private/qfilesystemwatcher_kqueue_p

# Source files to be moc'ed and the outputs included.
#
moc_src_adhoc = thread/qfutureinterface \
                thread/qthreadpool

win_moc_src_adhoc = io/qfilesystemwatcher_win

moc_mm_adhoc = kernel/qeventdispatcher_cf

# UNIX source files.
#
unix_src = io/qfilesystemengine_unix    \
           io/qfilesystemiterator_unix  \
           io/qfsfileengine_unix        \
           io/qlockfile_unix            \
           io/qprocess_unix             \
           ipc/qsharedmemory_posix      \
           ipc/qsharedmemory_systemv    \
           ipc/qsystemsemaphore_posix   \
           ipc/qsystemsemaphore_systemv \
           kernel/qcore_unix            \
           kernel/qeventdispatcher_unix \
           kernel/qpoll                 \
           kernel/qtimerinfo_unix       \
           plugin/qlibrary_unix         \
           thread/qthread_unix          \
           thread/qwaitcondition_unix

unix_c_src = io/forkfd_qt

# Linux source files.
#
linux_src = io/qfilesystemwatcher_inotify

# Windows source files.
#
win_src = global/qoperatingsystemversion_win    \
          io/qfilesystemengine_win              \
          io/qfilesystemiterator_win            \
          io/qfilesystemwatcher_win             \
          io/qfsfileengine_win                  \
          io/qlockfile_win                      \
          io/qprocess_win                       \
          io/qsettings_win                      \
          io/qstandardpaths_win                 \
          io/qstorageinfo_win                   \
          io/qwindowspipereader                 \
          io/qwindowspipewriter                 \
          ipc/qsharedmemory_win                 \
          ipc/qsystemsemaphore_win              \
          kernel/qcoreapplication_win           \
          kernel/qeventdispatcher_win           \
          kernel/qfunctions_win                 \
          kernel/qwineventnotifier              \
          kernel/qwinregistry                   \
          plugin/qcoffpeparser                  \
          plugin/qlibrary_win                   \
          plugin/qsystemlibrary                 \
          text/qlocale_win                      \
          thread/qthread_win                    \
          thread/qwaitcondition_win             \
          time/qtimezoneprivate_icu

# Mac OS source files.
#
# Note: qmachparser depends on QT_FEATURE_library (from qtcore-config.h.in).
#
macos_src = io/qsettings_mac            \
            io/qstorageinfo_mac         \
            kernel/qcfsocketnotifier    \
            kernel/qcoreapplication_mac \
            kernel/qpermissions         \
            plugin/qmachparser

macos_mm = global/qoperatingsystemversion_darwin        \
           io/qfilesystemengine_mac                     \
           io/qfilesystemwatcher_fsevents               \
           io/qprocess_darwin                           \
           io/qstandardpaths_mac                        \
           kernel/qcore_foundation                      \
           kernel/qcore_mac                             \
           kernel/qeventdispatcher_cf                   \
           kernel/qpermissions_darwin                   \
           platform/darwin/qdarwinpermissionplugin      \
           text/qlocale_mac                             \
           time/qtimezoneprivate_mac

# Generated headers.
#
gen_hdr = qconfig       private/QtCore/private/qconfig_p       \
          qtcore-config private/QtCore/private/qtcore-config_p \
          qtcoreexports

# Force headers that are included by C source files to be C headers otherwise
# they are most likely to be detected as C++ headers due to being included
# most often from C++ source files, which could break build2's header
# dependency extraction.
#
c_hdr = qglobal qsystemdetection qprocessordetection qcompilerdetection \
        $gen_hdr

moc_predefs = private/QtCore/private/moc_predefs

# Headers and source files.
#
./: lib{Qt6Core}: hxx{** -{$c_hdr} +Q*.} h{$c_hdr} hxx{$moc_predefs} cxx{$src}

# This target exports search directories for the private headers which are
# located in a deeper directory subtree to prevent them from being found by
# accident. Used by other Qt libraries (libQt6Gui, etc).
#
[rule_hint=cxx] lib{Qt6CorePrivate}:
{
  export.metadata = 1 libQt6Core

  # Export the path to the generated hxx{moc_predefs} as metadata.
  #
  libQt6Core.moc_predefs_path = [path] $out_base/"$moc_predefs".h
  libQt6Core.moc_predefs_path.for_install =                                     \
    [path] ($install.root != [null]                                             \
            ? $install.resolve($install.include)/qt6/QtCore/"$moc_predefs".h    \
            : .)
}

./: lib{Qt6CorePrivate}

# Generated source files.
#
gen_src = qmimeprovider_database        \
          global/qconfig-develop        \
          global/qconfig-install

# Headers, included source files, and other files.
#
lib{Qt6Core}: cxx{** -{$src $gen_src}} global/cxx{qconfig}      \
              ../3rdparty/{h    }{** -md5/md5}                  \
              ../3rdparty/{hxx  }{    md5/md5}                  \
              ../3rdparty/{c cxx}{**}                           \
              ../3rdparty/sha3/file{**.macros}                  \
              file{cmake.conf}:                                 \
  include = adhoc

# Generated source files.
#

# Note: this generated file is safe to update during execute: not a macro
#       header, not installed, and we assume q*.cpp is unique enough.
#
lib{Qt6Core}: cxx{qmimeprovider_database}:
{
  include = adhoc
  update = execute
}

lib{Qt6Core}: global/cxx{qconfig-install}: for_install = true
lib{Qt6Core}: global/cxx{qconfig-develop}: for_install = false

# Platform-specific source files.
#
lib{Qt6Core}: cxx{$unix_src} c{$unix_c_src}:     include = $unix
lib{Qt6Core}: cxx{$linux_src}:                   include = $linux
lib{Qt6Core}: cxx{$win_src}:                     include = $windows
lib{Qt6Core}: cxx{$macos_src} mm{$macos_mm}:     include = $macos
lib{Qt6Core}: cxx{io/qfilesystemwatcher_kqueue}: include = $bsd

# Note: qelfparser_p and qlibrary_unix depend on QT_FEATURE_library (from
# qtcore-config.h.in).
#
lib{Qt6Core}: cxx{io/qstandardpaths_unix        \
                  plugin/qelfparser_p           \
                  text/qlocale_unix             \
                  time/qtimezoneprivate_icu     \
                  time/qtimezoneprivate_tz}: include = ($unix && !$macos)

lib{Qt6Core}: cxx{io/qstorageinfo_unix}:  include = ($unix && !$macos && !$linux)
lib{Qt6Core}: cxx{io/qstorageinfo_linux}: include = $linux

# Generate a header with the C++ compiler's predefined macros. It is used to
# make them available to moc.
#
# This is necessary because moc's (built-in) preprocessor evaluates conditions
# and expands macros and thus the set of defined macros can affect its
# output. For example, signals and/or slots can be defined conditionally.
#
# Not all compilers have a mode that produces such a macro list. GCC, Clang,
# and the Intel compiler do, but MSVC only got support in MSVC 19 (cl.exe
# version 19.20). In that case we fall back to a very basic, manually-created
# predefs header.
#
# Note that CMake puts WIN32 and not _WIN32 into their predefs for moc for
# some reason. But all the moc-compiled headers check for both _WIN32 and
# WIN32 so we keep it consistent with the auto-generated version.
#
[rule_hint=cxx.predefs] hxx{$moc_predefs}:
% update
if ($cxx.id == 'msvc' &&        \
    ($cxx.version.major < 19 || \
     ($cxx.version.major == 19 && $cxx.version.minor < 20)))
{{
  diag c++-predefs $>

  cat <<EOF >$path($>)
  #define _WIN32
  EOF
}}

# Dependencies involving moc-generated source files.
#
# Note: these would be safe to update during execute: not macro headers, not
#       installed, and we can assume moc_q*.cpp is unique enough. But testing
#       showed that that would result in worse performance. So we leave the
#       pre-generation enabled.
#

# The dependencies of lib{Qt6Core} on source files (moc_foo.cpp) generated by
# moc from headers. Note that some of these source files are compiled and some
# are included.
#
for s: hxx{$moc_hdr}
  lib{Qt6Core}: cxx{moc_$name($s)}
for s: hxx{$moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = adhoc

for s: hxx{$unix_moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = ($unix ? adhoc : false)

for s: hxx{$linux_moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = ($linux ? adhoc : false)

for s: hxx{$win_moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = ($windows ? adhoc : false)

for s: hxx{$macos_moc_hdr}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = $macos

for s: hxx{$macos_moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = ($macos ? adhoc : false)

for s: hxx{$bsd_moc_hdr_adhoc}
  lib{Qt6Core}: cxx{moc_$name($s)}: include = ($bsd ? adhoc : false)

for s: hxx{$moc_hdr $moc_hdr_adhoc              \
           $unix_moc_hdr_adhoc                  \
           $linux_moc_hdr_adhoc                 \
           $win_moc_hdr_adhoc                   \
           $macos_moc_hdr $macos_moc_hdr_adhoc  \
           $bsd_moc_hdr_adhoc}
  cxx{moc_$name($s)}: $s

# Target type for source file generated by moc from a source file.
#
define moc: cxx
moc{*}: extension = moc

# The dependencies of lib{Qt6Core} on source files (foo.moc) generated by moc
# from source files.
#
for s: cxx{$moc_src_adhoc}
  lib{Qt6Core}: moc{$name($s)}: include = adhoc

for s: cxx{$win_moc_src_adhoc}
  lib{Qt6Core}: moc{$name($s)}: include = ($windows ? adhoc : false)

for s: mm{$moc_mm_adhoc}
  lib{Qt6Core}: moc{$name($s)}: include = ($macos ? adhoc : false)

# The dependencies of moc-generated source files on the source files they were
# generated from (for example, `moc foo.cpp` produces foo.moc).
#
# The purpose of the additional cxx{moc_*} prerequisite in some cases is to
# ensure that the moc-generated target's moc-generated dependencies are
# updated before it itself is updated. This is necessary because a moc
# target's dependencies are extracted at the same time as it is updated:
# moc{foo} depends on cxx{moc_foo} because moc{foo} is generated from cxx{foo}
# which includes cxx{moc_foo}.
#
moc{qfutureinterface}: cxx{thread/qfutureinterface} hxx{$moc_predefs}

moc{qthreadpool}: cxx{thread/qthreadpool} hxx{$moc_predefs} \
                  cxx{moc_qthreadpool}

moc{qfilesystemwatcher_win}: cxx{io/qfilesystemwatcher_win} hxx{$moc_predefs}   \
                             cxx{moc_qfilesystemwatcher_win_p} # Note: "_p" suffix.

moc{qeventdispatcher_cf}: mm{kernel/qeventdispatcher_cf} hxx{$moc_predefs}      \
                          cxx{moc_qeventdispatcher_cf_p} # Note: "_p" suffix.

# Rule to run moc on a header file (foo.h -> moc_foo.cpp).
#
# Use -f to override the path moc uses to #include the input file, which is
# relative to the output directory, with just the name of the input file.
#
# Explicitly list the generated headers as dependencies in case the
# moc-generated file includes any of them (if only indirectly). Note that,
# because moc's `--output-dep-file` mode (which produces a list of header
# dependencies for the input file) silently omits non-existent headers from
# its output, it does not support generated headers and thus there is no
# choice but to declare these dependencies manually.
#
# Note that hxx{moc_predefs} must always be in position 1.
#
# Pass --no-notes to suppress "No relevant classes found. No output generated"
# messages.
#
cxx{~'/moc_(.*)/'}: hxx{~'/\1/'} hxx{$moc_predefs} h{$gen_hdr} $moc
{{
  o = $path($>[0])
  t = $(o).t

  depdb dyndep \
    --byproduct --drop-cycles --what=header --default-type=h --file $t

  s = $path($<[0])

  sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  $moc --no-notes                                                       \
       --include $path($<[1]) $cc.poptions $cxx.poptions $sys_incl      \
       -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}

# Rule to run moc on a source file (foo.cpp -> foo.moc).
#
# See the header-input moc rule regarding the header prerequisites.
#
moc{~'/(.*)/'}: cxx{~'/\1/'} hxx{$moc_predefs} h{$gen_hdr} $moc
{{
  o = $path($>[0])
  t = $(o).t

  depdb dyndep \
    --byproduct --drop-cycles --what=header --default-type=h --file $t

  s = $path($<[0])

  sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  $moc --no-notes                                                       \
       --include $path($<[1]) $cc.poptions $cxx.poptions $sys_incl      \
       --output-dep-file --dep-file-path $t -o $o $s
}}

# Rule to run moc on an Objective-C++ source file (foo.mm -> foo.moc).
#
# See the header-input moc rule regarding the header prerequisites.
#
moc{~'/(.*)/'}: mm{~'/\1/'} hxx{$moc_predefs} h{$gen_hdr} $moc
{{
  o = $path($>[0])
  t = $(o).t

  depdb dyndep \
    --byproduct --drop-cycles --what=header --default-type=h --file $t

  s = $path($<[0])

  sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  $moc --no-notes                                                       \
       --include $path($<[1]) $cc.poptions $cxx.poptions $sys_incl      \
       --output-dep-file --dep-file-path $t -o $o $s
}}

lib{Qt6Core}: $impl_libs $intf_libs

# Generated headers and source files.
#
using autoconf

# Header that defines symbol exporting, inlining, and deprecation macros.
#
h{qtcoreexports}: in{qtcoreexports}
{
  header_base_name_upper = QTCOREEXPORTS
  module_define_infix    = CORE
}

h{qconfig} private/QtCore/private/h{qconfig_p}  \
global/cxx{qconfig-install qconfig-develop}:    \
  in.symbol = '$'

# Extract the copyright string from upstream/qtbase/.cmake.conf.
#
qt_copyright = $process.run_regex(cat $src_base/cmake.conf,             \
                                  '^\s*set\(QT_COPYRIGHT\s+"(.+)"\)',   \
                                  '\1')

# All-Qt public configuration header. Included by other Qt libraries via
# QtCore/qtconfiginclude.h.
#
# See the .in file for more information.
#
h{qconfig}: in{qconfig}
{
  autoconf.prefix = qconfig_

  QT_VERSION_STR="$version.major.$version.minor.$version.patch"
  QT_VERSION_MAJOR="$version.major"
  QT_VERSION_MINOR="$version.minor"
  QT_VERSION_PATCH="$version.patch"

  QT_COPYRIGHT="$qt_copyright"
}

# All-Qt private configuration header. Included by a few other Qt libraries
# via QtCore/qglobal_p.h.
#
# See the .in file for more information.
#
private/QtCore/private/h{qconfig_p}: private/QtCore/private/in{qconfig_p}
{
  autoconf.prefix = qconfig_p_

  # Enable to make Qt relocatable. See the comments on the
  # cxx{qconfig-install} target for more information.
  #
  QT_FEATURE_relocatable = ($install.relocatable ? 1 : -1)
}

# Public QtCore library configuration (mostly high-level features). Included
# by other Qt libraries via QtCore/qglobal.h.
#
# See the .in file for more information.
#
h{qtcore-config}: in{qtcore-config}
{
  autoconf.prefix = qtcore_config_
}

# Private QtCore library configuration (lower-level features and
# settings). Included by a few other Qt libraries via QtCore/qglobal_p.h.
#
# See the .in file for more information.
#
private/QtCore/private/h{qtcore-config_p}: private/QtCore/private/in{qtcore-config_p}
{
  autoconf.prefix = qtcore_config_p_
}

# global/qconfig.cpp:
#
# This file provides information relating to installation paths. It is
# included by global/qlibraryinfo.cpp (so we don't compile it). In upstream it
# is generated during the configure step (qtbase/configure.pri).
#
# In order to support different installation paths for the installed and
# uninstalled cases in build2 we turn qconfig.cpp into a real file (that is,
# not generated) and turn its static variable and macro definitions into
# extern variable declarations. Then we generate two source files,
# qconfig-install.cpp and qconfig-develop.cpp, that define the variables to
# values appropriate for the installed and uninstalled cases, respectively,
# and we use (above) the `for_install` prerequisite-specific variable to
# control which of the two gets linked in each case.
#
# See also comments in qconfig.cpp.in.
#

# Installed case: Here the installation prefix is an absolute path and the
# other paths are all relative (to the prefix).
#
# In a relocatable installation the prefix below is not used. Instead Qt
# derives the prefix from the location of the libQt6Core shared library using
# the platform equivalent of dlopen, or the location of the executable in the
# case of static builds.
#
# Note that while this object file should only be linked when we are
# installing, it will be compiled even in the uninstalled case where we may
# have no install.root.
#
global/cxx{qconfig-install}:
{
  i = ($install.root != [null])

  # Values of the installation paths. Make the $install.* paths relative to
  # $install.root.
  #
  # Set an empty prefix in case of a relocatable installation to ensure no
  # hardcoded paths are used inadvertently.
  #
  prefix       = [dir_path] ($i ? ($install.relocatable ? '' : $install.root) : .)
  doc          = [dir_path] ($i ? $leaf($install.resolve($install.doc), $install.root) : .)
  incl         = [dir_path] ($i ? $leaf($install.resolve($install.include), $install.root) : .)
  lib          = [dir_path] ($i ? $leaf($install.resolve($install.lib), $install.root) : .)
  bin          = [dir_path] ($i ? $leaf($install.resolve($install.bin), $install.root) : .)
  libexec      = [dir_path] ($i ? $leaf($install.resolve($windows ? $install.bin : $install.libexec), $install.root) : .)
  plugins      = [dir_path] $lib/qt6/plugins
  qml_imports  = [dir_path] $lib
  qml          = [dir_path] $lib
  data         = [dir_path] ($i ? $leaf($install.resolve($install.data), $install.root) : .)
  arch_data    = [dir_path] $data
  translations = [dir_path] translations
  examples     = [dir_path] examples
  tests        = [dir_path] tests

  # A path appended to the path of the directory containing the installed
  # QtCore library to get to the prefix path. (Not used in static builds.)
  #
  # For example, if the prefix is /usr/local and the library is installed in
  # /usr/local/lib, upstream would do "/usr/local/lib" + "/" + "../" to get
  # "/usr/local".
  #
  lib_to_prefix = [dir_path] ($i ? $relative($install.root, $install.resolve($install.lib)) : .)
}

# Uninstalled case: Here the installation prefix is the filesystem root and
# the other directories are all absolute paths (because the source and output
# directories may not have a longer common prefix).
#
assert ($root_directory($out_root) == $root_directory($src_root)) \
  "out_root and src_root must have common filesystem root"

global/cxx{qconfig-develop}:
{
  # Values of the installation paths.
  #
  prefix       = [dir_path] $root_directory($out_root)
  doc          = [dir_path] $out_root/doc
  incl         = [dir_path] $src_root
  lib          = [dir_path] $out_root
  libexec      = [dir_path] $out_root
  bin          = [dir_path] $out_root

  # Empty string to prevent any plugins from being found. In the development
  # case we register a separate path for each Qt module's plugins at runtime
  # (for example, see the in rule for kernel/cxx{qguiapplication-develop} in
  # libQt6Gui/QtGui/buildfile). (In the installed case all plugins are below a
  # single plugins directory.)
  #
  plugins      = ''

  qml_imports  = [dir_path] $out_root
  qml          = [dir_path] $out_root
  arch_data    = [dir_path] $src_root
  data         = [dir_path] $src_root
  translations = [dir_path] $out_root/translations
  examples     = [dir_path] $src_root/examples
  tests        = [dir_path] $src_root/tests

  # See comment in the installed case above.
  #
  lib_to_prefix = [dir_path] $relative($prefix, $lib)
}

# Installed and uninstalled cases.
#
global/cxx{qconfig-install qconfig-develop}: global/in{qconfig}
{
  # The directory path containing user application settings. Ignored on
  # Windows where the registry is used instead.
  #
  settingspath = ($macos ? /Library/Preferences/Qt : etc/xdg)

  # Escape backslashes on Windows.
  #
  prefix       = [dir_path] $regex.replace($prefix, '\\', '\\\\')
  doc          = [dir_path] $regex.replace($doc, '\\', '\\\\')
  incl         = [dir_path] $regex.replace($incl, '\\', '\\\\')
  lib          = [dir_path] $regex.replace($lib, '\\', '\\\\')
  libexec      = [dir_path] $regex.replace($libexec, '\\', '\\\\')
  bin          = [dir_path] $regex.replace($bin, '\\', '\\\\')
  plugins      = [dir_path] $regex.replace($plugins, '\\', '\\\\')
  qml_imports  = [dir_path] $regex.replace($qml_imports, '\\', '\\\\')
  qml          = [dir_path] $regex.replace($qml, '\\', '\\\\')
  arch_data    = [dir_path] $regex.replace($arch_data, '\\', '\\\\')
  data         = [dir_path] $regex.replace($data, '\\', '\\\\')
  translations = [dir_path] $regex.replace($translations, '\\', '\\\\')
  examples     = [dir_path] $regex.replace($examples, '\\', '\\\\')
  tests        = [dir_path] $regex.replace($tests, '\\', '\\\\')

  lib_to_prefix = [dir_path] $regex.replace($lib_to_prefix, '\\', '\\\\')
}

# qmimeprovider_database.cpp:
#
# Convert mimetypes/3rdparty/tika-mimetypes.xml into an array definition
# which is included by mimetypes/qmimeprovider.cpp. Note that the
# MimeTypeDatabaseOriginalSize variable is the size of the uncompressed data.
#
cxx{qmimeprovider_database}: mimetypes/3rdparty/tika-mimetypes.xml $xxd
{{
  diag xxd ($<[0]) -> $>

  i = $path($<[0]) # Input.
  o = $path($>)    # Output.

  echo '#define MIME_DATABASE_IS_UNCOMPRESSED'               >$o
  echo 'static const unsigned char mimetype_database[] = {' >>$o
  $xxd -i <$i                                               >>$o
  echo '};'                                                 >>$o
  echo 'static constexpr size_t MimeTypeDatabaseOriginalSize = sizeof(mimetype_database);' >> $o
}}

# Build options.
#
# Add 3rdparty/forkfd/ for an include of <forkfd.h>.
#
cc.poptions =+                                                                  \
  "-I$out_root"                        "-I$src_root"                            \
  "-I$out_root"                        "-I$src_root"                            \
  "-I$out_root/QtCore"                 "-I$src_root/QtCore"                     \
  "-I$out_base/private"                "-I$src_base/private"                    \
  "-I$out_base/private/QtCore"         "-I$src_base/private/QtCore"             \
  "-I$out_base/private/QtCore/private" "-I$src_base/private/QtCore/private"     \
  "-I$src_root/3rdparty/forkfd"

cc.poptions += $lib_macros                      \
               -DQT_BUILD_CORE_LIB              \
               -DQT_NO_CONTEXTLESS_CONNECT      \
               -DQT_NO_QPAIR                    \
               -DQT_NO_USING_NAMESPACE          \
               -DQT_TYPESAFE_FLAGS

if! $config.libQt6Core.debug
  cc.poptions += -DQT_NO_DEBUG

# Note: the same macro from export/import (see also -DQT_BUILD_CORE_LIB).
#
{hbmia obja}{*}: cc.poptions += -DQT_STATIC
{hbmis objs}{*}: cc.poptions += -DQT_SHARED

# Add platform-specific header directories, libraries, compilation options,
# and macro definitions.
#
if $windows
{
  # "Remove QT_NO_CAST_TO_ASCII to ensure that the symbols are included in the
  # library."
  #
  cc.poptions = $regex.filter_out_match($cc.poptions, -DQT_NO_CAST_TO_ASCII)
}
else
{
  if $macos
    cc.poptions += -D_DARWIN_C_SOURCE

  lib{Qt6Core}: cxx.libs += -pthread

  if $linux
    lib{Qt6Core}: cxx.libs += -ldl


  # -lrt is required for shm_open() and shm_unlink() on Linux and NetBSD.
  #
  if ($linux || $netbsd)
    lib{Qt6Core}: cxx.libs += -lrt
}

# Not sure if/when this is necessary (see `libatomic` in
# corelib/configure.json).
#
# I believe this library is only necessary if std::automic<T> operations
# cannot be implemented as instructions (usually with T=int64_t) and as a
# result must be emulated. In this case this emulation is provided by this
# library.
#
# cxx.libs += -latomic

# libexecinfo is required for backtrace(3) on BSD (see global/qlogging.cpp).
#
if $bsd
  lib{Qt6Core}: cxx.libs += -lexecinfo

# Every directory under mkspecs/ contains a unique `qplatformdefs.h`.
#
# Note that Mac OS with GCC is not supported by upstream (see README-DEV for
# details).
#
switch $cxx.target.class, $cxx.id, $cxx.target.system
{
  case 'linux', 'gcc'
    cc.poptions += "-I$src_root/QtCore/mkspecs/linux-g++"
  case 'linux', 'clang'
    cc.poptions += "-I$src_root/QtCore/mkspecs/linux-clang"
  case 'macos', 'clang-apple'
  {
    cc.poptions += "-I$src_root/QtCore/mkspecs/macx-clang"

    lib{Qt6Core}: cxx.libs += -framework AppKit                 \
                              -framework CoreServices           \
                              -framework DiskArbitration        \
                              -framework Foundation             \
                              -framework IOKit                  \
                              -framework Security
  }
  case 'bsd', 'clang', 'freebsd'
    cc.poptions += "-I$src_root/QtCore/mkspecs/freebsd-clang"
  case 'bsd', 'gcc', 'openbsd'
    cc.poptions += "-I$src_root/QtCore/mkspecs/openbsd-g++"
  case 'bsd', 'gcc', 'netbsd'
    cc.poptions += "-I$src_root/QtCore/mkspecs/netbsd-g++"
  case 'windows', 'msvc'
  {
    cc.poptions += "-I$src_root/QtCore/mkspecs/win32-msvc"

    # @@ synchronization.lib is only for Windows >= 8; on older versions no
    #    library should be added.
    #
    lib{Qt6Core}: cxx.libs += advapi32.lib              \
                              authz.lib                 \
                              mpr.lib                   \
                              netapi32.lib              \
                              ole32.lib                 \
                              synchronization.lib       \
                              userenv.lib               \
                              version.lib               \
                              winmm.lib                 \
                              ws2_32.lib
  }
  case 'windows', 'msvc-clang' | 'clang'
  {
    cc.poptions += "-I$src_root/QtCore/mkspecs/win32-clang-msvc"

    lib{Qt6Core}: cxx.libs += advapi32.lib              \
                              authz.lib                 \
                              mpr.lib                   \
                              netapi32.lib              \
                              ole32.lib                 \
                              synchronization.lib       \
                              userenv.lib               \
                              version.lib               \
                              winmm.lib                 \
                              ws2_32.lib
  }
  case 'windows', 'gcc', 'mingw32'
  {
    cc.poptions += "-I$src_root/QtCore/mkspecs/win32-g++"

    cxx.coptions += -fno-keep-inline-dllexport

    lib{Qt6Core}: cxx.libs += -ladvapi32        \
                              -lauthz           \
                              -lmpr             \
                              -lnetapi32        \
                              -lole32           \
                              -lsynchronization \
                              -luserenv         \
                              -luuid            \
                              -lversion         \
                              -lwinmm           \
                              -lws2_32
  }
}

objs{$src}: cc.poptions += $so_macros

# Export options.
#
lib{Qt6Core}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"                     \
                        "-I$out_root/QtCore" "-I$src_root/QtCore"       \
                        -DQT_CORE_LIB
  cxx.export.libs = $intf_libs
}

# QT_NO_VERSION_TAGGING is automatically defined for static builds (see
# qversiontagging.h) so define it only for shared builds.
#
libs{Qt6Core}: cxx.export.poptions += -DQT_NO_VERSION_TAGGING

if $windows
{
  if ($cxx.target.system == 'mingw32')
    lib{Qt6Core}: cxx.export.libs += -lmpr -luserenv
  else
    lib{Qt6Core}: cxx.export.libs += mpr.lib userenv.lib
}
elif $macos
    lib{Qt6Core}: cxx.export.libs += -framework DiskArbitration \
                                     -framework IOKit

liba{Qt6Core}: cxx.export.poptions += -DQT_STATIC
libs{Qt6Core}: cxx.export.poptions += -DQT_SHARED

lib{Qt6CorePrivate}: cxx.export.poptions =                              \
  "-I$out_base/private"                "-I$src_base/private"            \
  "-I$out_base/private/QtCore"         "-I$src_base/private/QtCore"     \
  "-I$out_base/private/QtCore/private" "-I$src_base/private/QtCore/private"

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{Qt6Core}: bin.lib.version = "-$version.project_id"
else
  lib{Qt6Core}: bin.lib.version = "-$version.major.$version.minor"

# Install public headers into the qt6/QtCore/ subdirectory of, say,
# /usr/include/. Note that headers are included as <QtCore/*>.
#
{h hxx}{../3rdparty/* private/* testlib/*}: install = false
{hxx h}{*}:               install = include/qt6/QtCore/
h{qconfig qtcore-config}: install = include_arch/qt6/QtCore/

lib{Qt6Core}: cxx.pkgconfig.include = include/qt6 include/qt6/QtCore

# Install private headers into the qt6/QtCore/private/ subdirectory of, say,
# /usr/include/, recreating subdirectories. Note that private headers are
# included prefixed with `QtCore/private/`, `private/`, or without a prefix.
#
{h hxx}{private/*}:
{
  install = include/qt6/QtCore/private/
  install.subdirs = true
}

private/QtCore/private/h{qconfig_p qtcore-config_p}: \
  install = include_arch/qt6/QtCore/private/

lib{Qt6CorePrivate}:                                            \
 cxx.pkgconfig.include = include/qt6/QtCore/private             \
                         include/qt6/QtCore/private/QtCore      \
                         include/qt6/QtCore/private/QtCore/private
