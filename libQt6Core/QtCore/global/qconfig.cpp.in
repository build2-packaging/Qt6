// See the buildfile for more information.
//

#include "global/qconfig.cpp"

// Used only if QT_FEATURE_relocatable is disabled and any of the paths
// requested from qt_configure_strs (via QLibraryInfo::location()) are
// relative, and -- on Linux and GNU Hurd -- printed as part of the
// "version/copyright/contact" preamble at program startup.
//
extern const char qt_configure_prefix_path_str[12 + 256] =
    "qt_prfxpath=$prefix$";

// Installation paths corresponding to the enumerators in enum
// QLibraryInfo::LibraryLocation.
//
const char* QtConfigureStrs::strings_[QtConfigureStrs::path_count_] {
  "$doc$",
  "$incl$",
  "$lib$",
  "$libexec$",
  "$bin$",
  "$plugins$",
  "$qml_imports$",
  "$qml$",
  "$arch_data$",
  "$data$",
  "$translations$",
  "$examples$",
  "$tests$"};

// Lengths of the installation paths in strings_.
//
const size_t QtConfigureStrs::lengths_[QtConfigureStrs::path_count_] {
  strlen (QtConfigureStrs::strings_[0]),
  strlen (QtConfigureStrs::strings_[1]),
  strlen (QtConfigureStrs::strings_[2]),
  strlen (QtConfigureStrs::strings_[3]),
  strlen (QtConfigureStrs::strings_[4]),
  strlen (QtConfigureStrs::strings_[5]),
  strlen (QtConfigureStrs::strings_[6]),
  strlen (QtConfigureStrs::strings_[7]),
  strlen (QtConfigureStrs::strings_[8]),
  strlen (QtConfigureStrs::strings_[9]),
  strlen (QtConfigureStrs::strings_[10]),
  strlen (QtConfigureStrs::strings_[11]),
  strlen (QtConfigureStrs::strings_[12])};

const QtConfigureStrs qt_configure_strs;

// The directory path containing user application settings.
//
const char* QT_CONFIGURE_SETTINGS_PATH = "$settingspath$";

// A relative path used to get the installation prefix path starting from the
// absolute path of the directory containing the QtCore library (looked up
// using whatever the platform equivalent of dladdr(3) is), the ultimate goal
// being to turn the (usually) relative installation paths into absolute
// paths.
//
const char* QT_CONFIGURE_LIBLOCATION_TO_PREFIX_PATH = "$lib_to_prefix$/";
